<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>L1，L2正则化的理解</title>
    <url>/2020/01/28/L1%E5%92%8CL2%E6%AD%A3%E5%88%99%E5%8C%96%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<p>摘录自：</p>
<p>https://zhuanlan.zhihu.com/p/35356992</p>
<p>https://zhuanlan.zhihu.com/p/29360425</p>
<h2 id="正则化理解之结构最小化">正则化理解之结构最小化</h2>
<h3 id="首先给出一个例子解释l1的作用可以使得模型获得稀疏解">首先给出一个例子解释<strong>L1的作用可以使得模型获得稀疏解</strong></h3>
<a id="more"></a>
<p><a href="https://blog.csdn.net/xiaojiajia007/article/details/90611838" target="_blank" rel="noopener">点击查看：L1正则能够使得模型的解稀疏</a> <img src="https://img-blog.csdnimg.cn/20190529105352198.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW9qaWFqaWEwMDc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p>
<p><strong>正则化之所以能够降低过拟合的原因在于，正则化是结构风险最小化的一种策略实现。</strong></p>
<p>给loss function加上正则化项，能使得新得到的优化目标函数h = f+normal，需要在f和normal中做一个权衡（trade-off），如果还像原来只优化f的情况下，那可能得到一组解比较复杂，使得正则项normal比较大，那么h就不是最优的，因此可以看出加正则项能让解更加简单，符合奥卡姆剃刀理论，同时也比较符合在偏差和方差（方差表示模型的复杂度）分析中，通过降低模型复杂度，得到更小的泛化误差，降低过拟合程度。</p>
<p><strong>L1正则化和L2正则化：</strong></p>
<p>L1正则化就是在loss function后边所加正则项为L1范数，加上L1范数容易得到稀疏解（0比较多）。L2正则化就是loss function后边所加正则项为L2范数的平方，加上L2正则相比于L1正则来说，得到的解比较平滑（不是稀疏），但是同样能够保证解中接近于0（但不是等于0，所以相对平滑）的维度比较多，降低模型的复杂度。</p>
<h3 id="作图说明">作图说明</h3>
<p><a href="https://blog.csdn.net/liangdong2014/article/details/79517638" target="_blank" rel="noopener">摘录自</a></p>
<p><img src="https://img-blog.csdnimg.cn/20190529163213574.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW9qaWFqaWEwMDc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> <strong>从等高线和取值空间的交点可以看到L1更容易倾向一个权重偏大一个权重为0。L2更容易倾向权重都较小。</strong></p>
<p>而通过求导数可以看出，对于两种正则带来的梯度更新：</p>
<ul>
<li>L1减少的是一个常量，L2减少的是权重的固定比例</li>
<li>孰快孰慢取决于权重本身的大小，权重刚大时可能L2快，较小时L1快</li>
<li>L1使权重稀疏，L2使权重平滑，一句话总结就是：L1会趋向于产生少量的特征，而其他的特征都是0，而L2会选择更多的特征，这些特征都会接近于0</li>
</ul>
<hr />
<h2 id="正则化理解之最大后验概率估计map">正则化理解之最大后验概率估计（MAP）</h2>
<h3 id="在最大似然估计中1">在最大似然估计中<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a></h3>
<p>设<span class="math inline">\(X\)</span>、<span class="math inline">\(y\)</span>为训练样本和相应的标签，<span class="math inline">\(X=\left(x_{1}, x_{2}, \ldots, x_{n}\right)\)</span>是一组抽样数据，满足独立同分布假设（i.i.d），假设权重<span class="math inline">\(w\)</span>是未知的参数，从而求得对数<strong>似然函数</strong>: <span class="math display">\[
\operatorname{MLP}=l(w)=\log [P(y | X ; w)]=\log \left[\prod_{i} P\left(y^{i} | x^{i} ; w\right)\right]
\]</span> 通过假设<span class="math inline">\(y^{i}\)</span>的不同概率分布，即可得到不同的模型（即变成已知模型形式，拟合模型参数的问题，<font color="#000066">w的写法是前面加分号，表示它是某一固定参数值，而不是概率条件！</font>）。例如若假设<span class="math inline">\(y^{i} \sim N\left(w^{T} x^{i}, \sigma^{2}\right)\)</span>的高斯分布（<span class="math inline">\(x^{i}\)</span>也是一系列随机向量，随机向量的每个分量都对<span class="math inline">\(y^{i}\)</span>有影响，若随机向量的维度很大，可以认为<span class="math inline">\(y^{i}\)</span>服从正态分布，而一般正态分布可以转化成标准正态分布求解），则有： <span class="math display">\[
l(w)=\log \left[\prod_{i} \frac{1}{\sqrt{2 \pi} \sigma} e^{-\frac{\left(y^{i}-w^{T} x^{i}\right)^{2}}{2 \sigma^{2}}}\right]=-\frac{1}{2 \sigma^{2}} \sum_{i}\left(y^{i}-w^{T} x^{i}\right)^{2}+C
\]</span> 式子中<span class="math inline">\(C\)</span>是常数项，常数项和系数项不影响求最大值，因而可令<span class="math inline">\(J(w ; X, y)=-l(w)\)</span>即可得到线性回归的代价函数。这里我们可以看到，<font color=purple face=bold>使用假设<span class="math inline">\(y^{i}\)</span>服从正态分布的极大似然估计方法和均方误差最小化求解线性回归的结果是一样的！</font></p>
<p><br></p>
<h3 id="在最大后验概率估计中">在最大后验概率估计中</h3>
<p>将权重<span class="math inline">\(w\)</span>看作随机变量，也具有某种分布，从而有： <span class="math display">\[
P(w|X,y)=\frac { P(w,X,y) }{ P(X,y) } =\frac { P(X,y|w)P(w) }{ P(X,y) } =\frac { P(X)P(y|w,X)P(w) }{ P(X,y) } \propto P(y|X,w)P(w)
\]</span> 上面式子中<span class="math inline">\(P(X,y)\)</span>等对于特定问题已经是固定值了，与<span class="math inline">\(w\)</span>无关，所以求的<span class="math inline">\(P(w|X,y)\)</span>正比于<span class="math inline">\(P(y|X,w)P(w)\)</span>。 那我们利用最大后验概率估计求参数 <span class="math inline">\(w\)</span> 的时候，同样取对数有<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a> <a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a>： <span class="math display">\[
\operatorname{MAP}=\log P(y | X, w) P(w)=\log P(y | X, w)+\log P(w)
\]</span> 可以看出后验概率函数为在似然函数的基础上增加了一项 <span class="math inline">\(\log P(w)\)</span>。<span class="math inline">\(P(w)\)</span>的意义是对权重系数<span class="math inline">\(w\)</span>的概率分布的先验假设,在收集到训练样本{<span class="math inline">\(X,y\)</span>}后，则可根据w在{<span class="math inline">\(X,y\)</span>}下的后验概率对<span class="math inline">\(w\)</span>进行修正，从而可以对<span class="math inline">\(w\)</span>更好地估计。</p>
<blockquote>
<p><strong>这里补充一下周志华老师的西瓜书149页的知识：</strong></p>
<p>概率学派认为参数虽然未知，但确实是客观存在的固定值，而贝叶斯学派则认为参数是未观察到的随机变量，其本身也有分布。因此可以先假定参数服从某个先验分布（没有观测到任何当前的数据前的先验知识），然后基于当前的观测值来计算参数的后验分布。</p>
</blockquote>
<h3 id="若假设w_j的先验分布为0均值的高斯分布即w_j-sim-nleft0-sigma2right">若假设<span class="math inline">\(w_{j}\)</span>的先验分布为0均值的高斯分布，即<span class="math inline">\(w_{j} \sim N\left(0, \sigma^{2}\right)\)</span>，</h3>
<p>则有： <span class="math display">\[
\log P(w)=\log \prod_{j} P\left(w_{j}\right)=\log \prod_{j}\left[\frac{1}{\sqrt{2 \pi} \sigma} e^{-\frac{\left(w_{j}\right)^{2}}{2 \sigma^{2}}}\right]=-\frac{1}{2 \sigma^{2}} \sum_{j} w_{j}^{2}+C^{\prime}
\]</span> <img src="https://img-blog.csdnimg.cn/20190529105226461.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW9qaWFqaWEwMDc=,size_16,color_FFFFFF,t_70" alt="高斯分布" /> 可以看到，在高斯分布下<span class="math inline">\(\log{P(w)}\)</span>的效果等价于在代价函数中增加<span class="math inline">\(L_{2}\)</span>正则项，也就是说<strong>在MAP中使用一个高斯分布的先验等价于在MLE中采用L2的正则</strong>。从上图可以看出<span class="math inline">\(w\)</span>值取到0附近的概率特别大。也就是说我们提前先假设了<span class="math inline">\(w\)</span>的解更容易取到0的附近。</p>
<h3 id="若假设w_j服从均值为0参数为a的拉普拉斯分布即pleftw_jrightfrac12-a-efrac-leftw_jrighta">若假设<span class="math inline">\(w_{j}\)</span>服从均值为0、参数为a的拉普拉斯分布，即：<span class="math inline">\(P\left(w_{j}\right)=\frac{1}{2 a} e^{\frac{-\left|w_{j}\right|}{a}}\)</span></h3>
<p>则有： <span class="math display">\[
\log P(w)=\log \prod_{j} \frac{1}{2 a} e^{\frac{-\left|w_{j}\right|}{a}}=-\frac{1}{a} \sum_{j}\left|w_{j}\right|+C^{\prime}
\]</span> <img src="https://img-blog.csdnimg.cn/2019052910525070.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW9qaWFqaWEwMDc=,size_16,color_FFFFFF,t_70" alt="拉普拉斯分布" /> 可以看到，在拉普拉斯分布下<span class="math inline">\(\log{P(w)}\)</span>的效果等价于在代价函数中增加<span class="math inline">\(L_{1}\)</span>正则项。从下图可以看出<span class="math inline">\(w\)</span>值取到0的概率特别大。也就是说我们提前先假设了<span class="math inline">\(w\)</span>的解更容易取到0。</p>
<h3 id="我们得到对于l_1l_2正则化的一种最大后验角度理解">我们得到对于<span class="math inline">\(L_{1}\)</span>、<span class="math inline">\(L_{2}\)</span>正则化的一种最大后验角度理解</h3>
<ul>
<li><span class="math inline">\(L_{1}\)</span>正则化可通过假设权重<span class="math inline">\(w\)</span> 的先验分布为拉普拉斯分布，由最大后验概率估计导出</li>
<li><span class="math inline">\(L_{2}\)</span>正则化可通过假设权重<span class="math inline">\(w\)</span> 的先验分布为高斯分布，由最大后验概率估计导出</li>
</ul>
<section class="footnotes" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p><span class="math inline">\(\arg \max \sum_{i=1}^{n} \log P\left(x_{i} ; \theta\right)\)</span>。对于离散的用分布律P，对于连续型的变量在数学中已知模型表达式则用概率密度函数f<a href="#fnref1" class="footnote-back" role="doc-backlink">↩</a></p></li>
<li id="fn2" role="doc-endnote"><p>辨析：MLP（Maximum A Posteriori）-最大似然估计（概率学派）； MAP（Maximum Likelihood Estimation）：最大后验概率估计（贝叶斯学派）<a href="https://zhuanlan.zhihu.com/p/32480810" target="_blank" rel="noopener">请参考</a><a href="#fnref2" class="footnote-back" role="doc-backlink">↩</a></p></li>
<li id="fn3" role="doc-endnote"><p>这里应该是省略的写法，比如<span class="math inline">\(P(w|X,y)\)</span>，里面三个都是随机变量，实际上对于一个具体的训练样本完整的写法应该是<span class="math inline">\(P(w=a|X=x1,y1)\)</span><a href="#fnref3" class="footnote-back" role="doc-backlink">↩</a></p></li>
</ol>
</section>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/01/27/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="quick-start">Quick Start</h2>
<h3 id="create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <tags>
        <tag>测试专用</tag>
      </tags>
  </entry>
  <entry>
    <title>一个 Pytorch 训练实践 (分布式训练 + 半精度_混合精度训练)</title>
    <url>/2019/12/12/%E4%B8%80%E4%B8%AA%20Pytorch%20%E8%AE%AD%E7%BB%83%E5%AE%9E%E8%B7%B5%20%EF%BC%88%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%AD%E7%BB%83%20+%20%E5%8D%8A%E7%B2%BE%E5%BA%A6_%E6%B7%B7%E5%90%88%E7%B2%BE%E5%BA%A6%E8%AE%AD%E7%BB%83%EF%BC%89/</url>
    <content><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/96408719" target="_blank" rel="noopener" title="Permalink to 一个 Pytorch 训练实践 （分布式训练 + 半精度/混合精度训练）">Source</a></p>
<h3 id="内容速览">内容速览</h3>
<ol type="1">
<li>'train.py': single training process on one GPU only.</li>
<li>'train_parallel.py': signle training process on multiple GPUs using <strong>Dataparallel</strong> (包括不同GPU之间的负载均衡).</li>
<li>'train_distributed.py' (<strong>recommended</strong>): multiple training processes on multiple GPUs using <strong>Nvidia Apex</strong> &amp; <strong>Distributed Training:</strong></li>
</ol>
<p><code>python -m torch.distributed.launch --nproc_per_node=4 train_distributed.py</code></p>
<a id="more"></a>
<h3 id="项目完整代码地址">项目（完整代码）地址</h3>
<p>网页地址：</p>
<p><a href="https://link.zhihu.com/?target=https%253A//github.com/jialee93/Improved-Body-Parts">https://github.com/jialee93/Improved-Body-Parts​github.com</a></p>
<p><strong>Please cite <a href="https://link.zhihu.com/?target=https%253A//arxiv.org/abs/1911.10529">this paper</a> kindly in your publications if the corresponding projects helps your research.</strong></p>
<p><a href="https://link.zhihu.com/?target=https%253A//arxiv.org/abs/1911.10529">https://arxiv.org/abs/1911.10529​arxiv.org</a></p>
<pre><code>inproceedings{li2019simple,
    title={Simple Pose: Rethinking and Improving a Bottom-up Approach for Multi-Person Pose Estimation},
    author={Jia Li and Wen Su and Zengfu Wang},
    booktitle = {arXiv preprint arXiv:1911.10529},
    year={2019}
}</code></pre>
<h3 id="项目声明">项目声明</h3>
<p>最近开源了一个项目的代码，因为平时有很多其他事情需要处理，业余时间自己又喜欢享受生活，科研对我来说简直彻底成为了副业，羞愧。</p>
<p>之前一直使用TensorFlow以及Keras，但是一直觉得它们没有继承Python丝滑的特性，所以最近果断转移到Pytorch。因此在做这份工作时，我以新入门的用户身份开始，把整个训练和测试流程给走一遍，踩到并且努力解决全过程的坑。这里也是给自己实验过程的踩坑做个总结，并且希望通过这个分享能够提高自己工作的关注度，以及希望自己的经验能够为他人所用。当然了，如果我的分享能够帮助到大家（<strong>主要针对Pytorch新手或者普通玩家，高级玩家请忽略本菜鸟，轻拍，谢谢</strong>），也欢迎引用我的对应的项目论文。</p>
<h3 id="多gpu分布式训练混合精度加速训练">多GPU分布式训练+混合精度加速训练</h3>
<p>对应上面开源链接的<em>train_distributed.py</em>脚本。相信最直接的代码以及注释就是最好的说明。该脚本同时包含了最常用的代码模版，包括例如 多进程的训练数据准备，模型权重的保存与载入，冻结部分网络层的权重，变相增加batch size，使用Nvidia官方的Apex包通过半精度或混合精度进行模型压缩和加速等等。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">import</span> apex.optimizers <span class="keyword">as</span> apex_optim</span><br><span class="line"><span class="keyword">import</span> torch.distributed <span class="keyword">as</span> dist</span><br><span class="line"><span class="keyword">from</span> config.config <span class="keyword">import</span> GetConfig, COCOSourceConfig, TrainingOpt</span><br><span class="line"><span class="keyword">from</span> data.mydataset <span class="keyword">import</span> MyDataset</span><br><span class="line"><span class="keyword">from</span> torch.utils.data.dataloader <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> models.posenet <span class="keyword">import</span> Network</span><br><span class="line"><span class="keyword">from</span> models.loss_model <span class="keyword">import</span> MultiTaskLoss</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">import</span> apex.optimizers <span class="keyword">as</span> apex_optim</span><br><span class="line">    <span class="keyword">from</span> apex.parallel <span class="keyword">import</span> DistributedDataParallel <span class="keyword">as</span> DDP</span><br><span class="line">    <span class="keyword">from</span> apex.fp16_utils <span class="keyword">import</span> *</span><br><span class="line">    <span class="keyword">from</span> apex <span class="keyword">import</span> amp</span><br><span class="line">    <span class="keyword">from</span> apex.multi_tensor_apply <span class="keyword">import</span> multi_tensor_applier</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">raise</span> ImportError(<span class="string">"Please install apex from https://www.github.com/nvidia/apex to run this example."</span>)</span><br><span class="line"></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">'PoseNet Training'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--resume'</span>, <span class="string">'-r'</span>, action=<span class="string">'store_true'</span>, default=<span class="literal">True</span>, help=<span class="string">'resume from checkpoint'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--freeze'</span>, action=<span class="string">'store_true'</span>, default=<span class="literal">False</span>,</span><br><span class="line">                    help=<span class="string">'freeze the pre-trained layers before output layers'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--warmup'</span>, action=<span class="string">'store_true'</span>, default=<span class="literal">True</span>, help=<span class="string">'using warm-up learning rate'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--checkpoint_path'</span>, <span class="string">'-p'</span>, default=<span class="string">'link2checkpoints_distributed'</span>, help=<span class="string">'save path'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--max_grad_norm'</span>, default=<span class="number">10</span>, type=float,</span><br><span class="line">                    help=(<span class="string">"If the norm of the gradient vector exceeds this, "</span></span><br><span class="line">                          <span class="string">"re-normalize it to have the norm equal to max_grad_norm"</span>))</span><br><span class="line"><span class="comment"># FOR DISTRIBUTED:  Parse for the local_rank argument, which will be supplied automatically by torch.distributed.launch.</span></span><br><span class="line">parser.add_argument(<span class="string">"--local_rank"</span>, default=<span class="number">0</span>, type=int)</span><br><span class="line">parser.add_argument(<span class="string">'--opt-level'</span>, type=str, default=<span class="string">'O1'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--sync_bn'</span>, action=<span class="string">'store_true'</span>, default=<span class="literal">True</span>,</span><br><span class="line">                    help=<span class="string">'enabling apex sync BN.'</span>)  <span class="comment"># 无触发为false， -s 触发为true</span></span><br><span class="line">parser.add_argument(<span class="string">'--keep-batchnorm-fp32'</span>, type=str, default=<span class="literal">None</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--loss-scale'</span>, type=str, default=<span class="literal">None</span>)  <span class="comment"># '1.0'</span></span><br><span class="line">parser.add_argument(<span class="string">'--print-freq'</span>, <span class="string">'-f'</span>, default=<span class="number">10</span>, type=int, metavar=<span class="string">'N'</span>, help=<span class="string">'print frequency (default: 10)'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ##############################################################################################################</span></span><br><span class="line"><span class="comment"># ###################################  Setup for some configurations ###########################################</span></span><br><span class="line"><span class="comment"># ##############################################################################################################</span></span><br><span class="line"></span><br><span class="line">torch.backends.cudnn.benchmark = <span class="literal">True</span>  <span class="comment"># 如果我们每次训练的输入数据的size不变，那么开启这个就会加快我们的训练速度</span></span><br><span class="line">use_cuda = torch.cuda.is_available()</span><br><span class="line"></span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">checkpoint_path = args.checkpoint_path</span><br><span class="line">opt = TrainingOpt()</span><br><span class="line">config = GetConfig(opt.config_name)</span><br><span class="line">soureconfig = COCOSourceConfig(opt.hdf5_train_data)  <span class="comment"># # 对于分布式训练，total_batch size = batch_size*world_size</span></span><br><span class="line">train_data = MyDataset(config, soureconfig, shuffle=<span class="literal">False</span>, augment=<span class="literal">True</span>)  <span class="comment"># shuffle in data loader</span></span><br><span class="line"></span><br><span class="line">soureconfig_val = COCOSourceConfig(opt.hdf5_val_data)</span><br><span class="line">val_data = MyDataset(config, soureconfig_val, shuffle=<span class="literal">False</span>, augment=<span class="literal">False</span>)  <span class="comment"># shuffle in data loader</span></span><br><span class="line"></span><br><span class="line">best_loss = float(<span class="string">'inf'</span>)</span><br><span class="line">start_epoch = <span class="number">0</span>  <span class="comment"># 从0开始或者从上一个epoch开始</span></span><br><span class="line"></span><br><span class="line">args.distributed = <span class="literal">False</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">'WORLD_SIZE'</span> <span class="keyword">in</span> os.environ:</span><br><span class="line">    args.distributed = int(os.environ[<span class="string">'WORLD_SIZE'</span>]) &gt; <span class="number">1</span></span><br><span class="line"></span><br><span class="line">args.gpu = <span class="number">0</span></span><br><span class="line">args.world_size = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># FOR DISTRIBUTED:  If we are running under torch.distributed.launch,</span></span><br><span class="line"><span class="comment"># the 'WORLD_SIZE' environment variable will also be set automatically.</span></span><br><span class="line"><span class="keyword">if</span> args.distributed:</span><br><span class="line">    args.gpu = args.local_rank</span><br><span class="line">    torch.cuda.set_device(args.gpu)</span><br><span class="line">    <span class="comment"># Initializes the distributed backend which will take care of synchronizing nodes/GPUs</span></span><br><span class="line">    torch.distributed.init_process_group(backend=<span class="string">'nccl'</span>, init_method=<span class="string">'env://'</span>)</span><br><span class="line">    args.world_size = torch.distributed.get_world_size()  <span class="comment"># 获取分布式训练的进程数</span></span><br><span class="line">    print(<span class="string">"World Size is :"</span>, args.world_size)</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> torch.backends.cudnn.enabled, <span class="string">"Amp requires cudnn backend to be enabled."</span></span><br><span class="line"></span><br><span class="line">model = Network(opt, config, dist=<span class="literal">True</span>, bn=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> args.sync_bn:  <span class="comment"># 用累计loss来达到sync bn 是不是更好，更改bn的momentum大小</span></span><br><span class="line">    <span class="comment">#  This should be done before model = DDP(model, delay_allreduce=True),</span></span><br><span class="line">    <span class="comment">#  because DDP needs to see the finalized model parameters</span></span><br><span class="line">    <span class="comment"># We rely on torch distributed for synchronization between processes. Only DDP support the apex sync_bn now.</span></span><br><span class="line">    <span class="keyword">import</span> apex</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"Using apex synced BN."</span>)</span><br><span class="line">    model = apex.parallel.convert_syncbn_model(model)</span><br><span class="line"></span><br><span class="line"><span class="comment"># It should be called before constructing optimizer if the module will live on GPU while being optimized.</span></span><br><span class="line">model.cuda()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> param <span class="keyword">in</span> model.parameters():</span><br><span class="line">    <span class="keyword">if</span> param.requires_grad:</span><br><span class="line">        print(<span class="string">'Parameters of network: Autograd'</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ##############################################################################################################</span></span><br><span class="line"><span class="comment"># ######################################## Froze some layers to fine-turn the model  ########################</span></span><br><span class="line"><span class="comment"># ##############################################################################################################</span></span><br><span class="line"><span class="keyword">if</span> args.freeze:</span><br><span class="line">    <span class="keyword">for</span> name, param <span class="keyword">in</span> model.named_parameters():  <span class="comment"># 带有参数名的模型的各个层包含的参数遍历</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'out'</span> <span class="keyword">or</span> <span class="string">'merge'</span> <span class="keyword">or</span> <span class="string">'before_regress'</span> <span class="keyword">in</span> name:  <span class="comment"># 判断参数名字符串中是否包含某些关键字</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        param.requires_grad = <span class="literal">False</span></span><br><span class="line"><span class="comment"># #############################################################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Actual working batch size on multi-GPUs is 4 times bigger than that on one GPU</span></span><br><span class="line"><span class="comment"># fixme: add up momentum if the batch grows?</span></span><br><span class="line"><span class="comment"># fixme: change weight_decay?</span></span><br><span class="line"><span class="comment">#    nesterov = True</span></span><br><span class="line"><span class="comment"># optimizer = apex_optim.FusedSGD(filter(lambda p: p.requires_grad, model.parameters()),</span></span><br><span class="line"><span class="comment">#                                 lr=opt.learning_rate * args.world_size, momentum=0.9, weight_decay=5e-4)</span></span><br><span class="line">optimizer = optim.SGD(filter(<span class="keyword">lambda</span> p: p.requires_grad, model.parameters()),</span><br><span class="line">                      lr=opt.learning_rate * args.world_size, momentum=<span class="number">0.9</span>, weight_decay=<span class="number">5e-4</span>)</span><br><span class="line"><span class="comment"># optimizer = apex_optim.FusedAdam(model.parameters(), lr=opt.learning_rate * args.world_size, weight_decay=1e-4)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置学习率下降策略, extract the "bare"  Pytorch optimizer before Apex wrapping.</span></span><br><span class="line"><span class="comment"># scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=10, gamma=0.4, last_epoch=-1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialize Amp.  Amp accepts either values or strings for the optional override arguments,</span></span><br><span class="line"><span class="comment"># for convenient interoperation with argparse.</span></span><br><span class="line"><span class="comment"># For distributed training, wrap the model with apex.parallel.DistributedDataParallel.</span></span><br><span class="line"><span class="comment"># This must be done AFTER the call to amp.initialize.</span></span><br><span class="line">model, optimizer = amp.initialize(model, optimizer,</span><br><span class="line">                                  opt_level=args.opt_level,</span><br><span class="line">                                  keep_batchnorm_fp32=args.keep_batchnorm_fp32,</span><br><span class="line">                                  loss_scale=args.loss_scale)  <span class="comment"># Dynamic loss scaling is used by default.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> args.distributed:</span><br><span class="line">    <span class="comment"># By default, apex.parallel.DistributedDataParallel overlaps communication with computation in the backward pass.</span></span><br><span class="line">    <span class="comment"># model = DDP(model)</span></span><br><span class="line">    <span class="comment"># delay_allreduce delays all communication to the end of the backward pass.</span></span><br><span class="line">    <span class="comment"># DDP模块同时也计算整体的平均梯度, 这样我们就不需要在训练步骤计算平均梯度。</span></span><br><span class="line">    model = DDP(model, delay_allreduce=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ###################################  Resume from checkpoint ###########################################</span></span><br><span class="line"><span class="keyword">if</span> args.resume:</span><br><span class="line">    <span class="comment"># Use a local scope to avoid dangling references</span></span><br><span class="line">    <span class="comment"># dangling references: a variable that refers to an object that was deleted prematurely</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">resume</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(opt.ckpt_path):</span><br><span class="line">            print(<span class="string">'Resuming from checkpoint ...... '</span>)</span><br><span class="line">            checkpoint = torch.load(opt.ckpt_path,</span><br><span class="line">                                    map_location=torch.device(<span class="string">'cpu'</span>))  <span class="comment"># map to cpu to save the gpu memory</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># #################################################</span></span><br><span class="line">            <span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line">            new_state_dict = OrderedDict()</span><br><span class="line">            <span class="comment"># # #################################################</span></span><br><span class="line">            <span class="keyword">for</span> k, v <span class="keyword">in</span> checkpoint[<span class="string">'weights'</span>].items():</span><br><span class="line">                <span class="comment"># Exclude the regression layer by commenting the following code when we change the output dims!</span></span><br><span class="line">                <span class="comment"># if 'out' or 'merge' or 'before_regress'in k:</span></span><br><span class="line">                <span class="comment">#     continue</span></span><br><span class="line">                name = <span class="string">'module.'</span> + k  <span class="comment"># add prefix 'module.'</span></span><br><span class="line">                new_state_dict[name] = v</span><br><span class="line">            model.load_state_dict(new_state_dict, strict=<span class="literal">False</span>)  <span class="comment"># , strict=False</span></span><br><span class="line">            <span class="comment"># # #################################################</span></span><br><span class="line">            <span class="comment"># model.load_state_dict(checkpoint['weights'])  # 加入他人训练的模型，可能需要忽略部分层，则strict=False</span></span><br><span class="line">            print(<span class="string">'Network weights have been resumed from checkpoint...'</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># amp.load_state_dict(checkpoint['amp'])</span></span><br><span class="line">            <span class="comment"># print('AMP loss_scalers and unskipped steps have been resumed from checkpoint...')</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># ############## We must convert the resumed state data of optimizer to gpu  ##############</span></span><br><span class="line">            <span class="comment"># """It is because the previous training was done on gpu, so when saving the optimizer.state_dict, the stored</span></span><br><span class="line">            <span class="comment">#  states(tensors) are of cuda version. During resuming, when we load the saved optimizer, load_state_dict()</span></span><br><span class="line">            <span class="comment">#  loads this cuda version to cpu. But in this project, we use map_location to map the state tensors to cpu.</span></span><br><span class="line">            <span class="comment">#  In the training process, we need cuda version of state tensors, so we have to convert them to gpu."""</span></span><br><span class="line">            optimizer.load_state_dict(checkpoint[<span class="string">'optimizer_weight'</span>])</span><br><span class="line">            <span class="keyword">for</span> state <span class="keyword">in</span> optimizer.state.values():</span><br><span class="line">                <span class="keyword">for</span> k, v <span class="keyword">in</span> state.items():</span><br><span class="line">                    <span class="keyword">if</span> torch.is_tensor(v):</span><br><span class="line">                        state[k] = v.cuda()</span><br><span class="line">            print(<span class="string">'Optimizer has been resumed from checkpoint...'</span>)</span><br><span class="line">            <span class="keyword">global</span> best_loss, start_epoch  <span class="comment"># global declaration. otherwise best_loss and start_epoch can not be changed</span></span><br><span class="line">            best_loss = checkpoint[<span class="string">'train_loss'</span>]</span><br><span class="line">            print(<span class="string">'******************** Best loss resumed is :'</span>, best_loss, <span class="string">'  ************************'</span>)</span><br><span class="line">            start_epoch = checkpoint[<span class="string">'epoch'</span>] + <span class="number">1</span></span><br><span class="line">            print(<span class="string">"========&gt; Resume and start training from Epoch &#123;&#125; "</span>.format(start_epoch))</span><br><span class="line">            <span class="keyword">del</span> checkpoint</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"========&gt; No checkpoint found at '&#123;&#125;'"</span>.format(opt.ckpt_path))</span><br><span class="line"></span><br><span class="line">    resume()</span><br><span class="line"></span><br><span class="line">train_sampler = <span class="literal">None</span></span><br><span class="line">val_sampler = <span class="literal">None</span></span><br><span class="line"><span class="comment"># Restricts data loading to a subset of the dataset exclusive to the current process</span></span><br><span class="line"><span class="comment"># Create DistributedSampler to handle distributing the dataset across nodes when training 创建分布式采样器来控制训练中节点间的数据分发</span></span><br><span class="line"><span class="comment"># This can only be called after distributed.init_process_group is called 这个只能在 distributed.init_process_group 被调用后调用</span></span><br><span class="line"><span class="comment"># 这个对象控制进入分布式环境的数据集以确保模型不是对同一个子数据集训练，以达到训练目标。</span></span><br><span class="line"><span class="keyword">if</span> args.distributed:</span><br><span class="line">    train_sampler = torch.utils.data.distributed.DistributedSampler(train_data)</span><br><span class="line">    val_sampler = torch.utils.data.distributed.DistributedSampler(val_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据加载器，在训练和验证步骤中喂数据</span></span><br><span class="line">train_loader = torch.utils.data.DataLoader(train_data, batch_size=opt.batch_size, shuffle=(train_sampler <span class="keyword">is</span> <span class="literal">None</span>),</span><br><span class="line">                                           num_workers=<span class="number">2</span>, pin_memory=<span class="literal">True</span>, sampler=train_sampler, drop_last=<span class="literal">True</span>)</span><br><span class="line">val_loader = torch.utils.data.DataLoader(val_data, batch_size=opt.batch_size, shuffle=<span class="literal">False</span>,</span><br><span class="line">                                         num_workers=<span class="number">2</span>, pin_memory=<span class="literal">True</span>, sampler=val_sampler, drop_last=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> param <span class="keyword">in</span> model.parameters():</span><br><span class="line">    <span class="keyword">if</span> param.requires_grad:</span><br><span class="line">        print(<span class="string">'Parameters of network: Autograd'</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># #  Update the learning rate for start_epoch times</span></span><br><span class="line"><span class="comment"># for i in range(start_epoch):</span></span><br><span class="line"><span class="comment">#     scheduler.step()</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(epoch)</span>:</span></span><br><span class="line">    print(<span class="string">'\n ############################# Train phase, Epoch: &#123;&#125; #############################'</span>.format(epoch))</span><br><span class="line">    torch.cuda.empty_cache()</span><br><span class="line">    model.train()</span><br><span class="line">    <span class="comment"># DistributedSampler 中记录目前的 epoch 数， 因为采样器是根据 epoch 来决定如何打乱分配数据进各个进程</span></span><br><span class="line">    <span class="keyword">if</span> args.distributed:</span><br><span class="line">        train_sampler.set_epoch(epoch)</span><br><span class="line">    <span class="comment"># scheduler.step()  use 'adjust learning rate' instead</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># adjust_learning_rate_cyclic(optimizer, epoch, start_epoch)  # start_epoch</span></span><br><span class="line">    print(<span class="string">'\nLearning rate at this epoch is: %0.9f\n'</span> % optimizer.param_groups[<span class="number">0</span>][<span class="string">'lr'</span>])  <span class="comment"># scheduler.get_lr()[0]</span></span><br><span class="line"></span><br><span class="line">    batch_time = AverageMeter()</span><br><span class="line">    losses = AverageMeter()</span><br><span class="line">    end = time.time()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> batch_idx, target_tuple <span class="keyword">in</span> enumerate(train_loader):</span><br><span class="line">        <span class="comment"># # ##############  Use schedule step or fun of 'adjust learning rate' #####################</span></span><br><span class="line">        adjust_learning_rate(optimizer, epoch, batch_idx, len(train_loader), use_warmup=args.warmup)</span><br><span class="line">        <span class="comment"># print('\nLearning rate at this epoch is: %0.9f\n' % optimizer.param_groups[0]['lr'])  # scheduler.get_lr()[0]</span></span><br><span class="line">        <span class="comment"># # ##########################################################</span></span><br><span class="line">        <span class="keyword">if</span> use_cuda:</span><br><span class="line">            <span class="comment">#  这允许异步 GPU 复制数据也就是说计算和数据传输可以同时进.</span></span><br><span class="line">            target_tuple = [target_tensor.cuda(non_blocking=<span class="literal">True</span>) <span class="keyword">for</span> target_tensor <span class="keyword">in</span> target_tuple]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># target tensor shape: [8,512,512,3], [8, 1, 128,128], [8,43,128,128], [8,36,128,128], [8,36,128,128]</span></span><br><span class="line">        images, mask_misses, heatmaps = target_tuple  <span class="comment"># , offsets, mask_offsets</span></span><br><span class="line">        <span class="comment"># images = Variable(images)</span></span><br><span class="line">        <span class="comment"># loc_targets = Variable(loc_targets)</span></span><br><span class="line">        <span class="comment"># conf_targets = Variable(conf_targets)</span></span><br><span class="line">        optimizer.zero_grad()  <span class="comment"># zero the gradient buff</span></span><br><span class="line">        loss = model(target_tuple)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> loss.item() &gt; <span class="number">2e5</span>:  <span class="comment"># try to rescue the gradient explosion</span></span><br><span class="line">            print(<span class="string">"\nOh My God ! \nLoss is abnormal, drop this batch !"</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> amp.scale_loss(loss, optimizer) <span class="keyword">as</span> scaled_loss:</span><br><span class="line">            scaled_loss.backward()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># torch.nn.utils.clip_grad_norm_(amp.master_params(optimizer), args.max_grad_norm)  # fixme: 可能是这个的问题吗？</span></span><br><span class="line">        optimizer.step()  <span class="comment"># TODO：可以使用累加的loss变相增大batch size，但对于bn层需要减少默认的momentum</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># train_loss += loss.item()  # 累加的loss !</span></span><br><span class="line">        <span class="comment"># 使用loss += loss.detach()来获取不需要梯度回传的部分。</span></span><br><span class="line">        <span class="comment"># 或者使用loss.item()直接获得所对应的python数据类型，但是仅仅限于only one element tensors can be converted to Python scalars</span></span><br><span class="line">        <span class="keyword">if</span> batch_idx % args.print_freq == <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># Every print_freq iterations, check the loss, accuracy, and speed.</span></span><br><span class="line">            <span class="comment"># For best performance, it doesn't make sense to print these metrics every</span></span><br><span class="line">            <span class="comment"># iteration, since they incur an allreduce and some host&lt;-&gt;device syncs.</span></span><br><span class="line">            <span class="comment"># print 会触发allreduce，而这个操作比较费时</span></span><br><span class="line">            <span class="keyword">if</span> args.distributed:</span><br><span class="line">                <span class="comment"># We manually reduce and average the metrics across processes. In-place reduce tensor.</span></span><br><span class="line">                reduced_loss = reduce_tensor(loss.data)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                reduced_loss = loss.data</span><br><span class="line"></span><br><span class="line">            <span class="comment"># to_python_float incurs a host&lt;-&gt;device sync</span></span><br><span class="line">            losses.update(to_python_float(reduced_loss), images.size(<span class="number">0</span>))  <span class="comment"># update needs average and number</span></span><br><span class="line">            torch.cuda.synchronize()  <span class="comment"># 因为所有GPU操作是异步的，应等待当前设备上所有流中的所有核心完成，测试的时间才正确</span></span><br><span class="line">            batch_time.update((time.time() - end) / args.print_freq)</span><br><span class="line">            end = time.time()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> args.local_rank == <span class="number">0</span>:  <span class="comment"># Print them in the Process 0</span></span><br><span class="line">                print(<span class="string">'==================&gt; Epoch: [&#123;0&#125;][&#123;1&#125;/&#123;2&#125;]\t'</span></span><br><span class="line">                      <span class="string">'Time &#123;batch_time.val:.3f&#125; (&#123;batch_time.avg:.3f&#125;)\t'</span></span><br><span class="line">                      <span class="string">'Speed &#123;3:.3f&#125; (&#123;4:.3f&#125;)\t'</span></span><br><span class="line">                      <span class="string">'Loss &#123;loss.val:.10f&#125; (&#123;loss.avg:.4f&#125;) &lt;================ \t'</span>.format(</span><br><span class="line">                    epoch, batch_idx, len(train_loader),</span><br><span class="line">                    args.world_size * opt.batch_size / batch_time.val,</span><br><span class="line">                    args.world_size * opt.batch_size / batch_time.avg,</span><br><span class="line">                    batch_time=batch_time,</span><br><span class="line">                    loss=losses))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">global</span> best_loss</span><br><span class="line">    <span class="comment"># DistributedSampler控制进入分布式环境的数据集以确保模型不是对同一个子数据集训练，以达到训练目标。</span></span><br><span class="line">    <span class="comment"># train_loss /= (len(train_loader))  # Each GPU process can only see 1/(world_size) training samples per epoch</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.local_rank == <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># Write the log file each epoch.</span></span><br><span class="line">        os.makedirs(checkpoint_path, exist_ok=<span class="literal">True</span>)</span><br><span class="line">        logger = open(os.path.join(<span class="string">'./'</span> + checkpoint_path, <span class="string">'log'</span>), <span class="string">'a+'</span>)</span><br><span class="line">        logger.write(<span class="string">'\nEpoch &#123;&#125;\ttrain_loss: &#123;&#125;'</span>.format(epoch, losses.avg))  <span class="comment"># validation时不要\n换行</span></span><br><span class="line">        logger.flush()</span><br><span class="line">        logger.close()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> losses.avg &lt; float(<span class="string">'inf'</span>):  <span class="comment"># &lt; best_loss</span></span><br><span class="line">            <span class="comment"># Update the best_loss if the average loss drops</span></span><br><span class="line">            best_loss = losses.avg</span><br><span class="line">            print(<span class="string">'\nSaving model checkpoint...\n'</span>)</span><br><span class="line">            state = &#123;</span><br><span class="line">                <span class="comment"># not posenet.state_dict(). then, we don't ge the "module" string to begin with</span></span><br><span class="line">                <span class="string">'weights'</span>: model.module.state_dict(),</span><br><span class="line">                <span class="string">'optimizer_weight'</span>: optimizer.state_dict(),</span><br><span class="line">                <span class="comment"># 'amp': amp.state_dict(),</span></span><br><span class="line">                <span class="string">'train_loss'</span>: losses.avg,</span><br><span class="line">                <span class="string">'epoch'</span>: epoch</span><br><span class="line">            &#125;</span><br><span class="line">            torch.save(state, <span class="string">'./'</span> + checkpoint_path + <span class="string">'/PoseNet_'</span> + str(epoch) + <span class="string">'_epoch.pth'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(epoch)</span>:</span></span><br><span class="line">    print(<span class="string">'\n ############################# Test phase, Epoch: &#123;&#125; #############################'</span>.format(epoch))</span><br><span class="line">    model.eval()</span><br><span class="line">    <span class="comment"># DistributedSampler 中记录目前的 epoch 数， 因为采样器是根据 epoch 来决定如何打乱分配数据进各个进程</span></span><br><span class="line">    <span class="comment"># if args.distributed:</span></span><br><span class="line">    <span class="comment">#     val_sampler.set_epoch(epoch)  # 验证集太小，不够4个划分</span></span><br><span class="line">    batch_time = AverageMeter()</span><br><span class="line">    losses = AverageMeter()</span><br><span class="line">    end = time.time()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> batch_idx, target_tuple <span class="keyword">in</span> enumerate(val_loader):</span><br><span class="line">        <span class="comment"># images.requires_grad_()</span></span><br><span class="line">        <span class="comment"># loc_targets.requires_grad_()</span></span><br><span class="line">        <span class="comment"># conf_targets.requires_grad_()</span></span><br><span class="line">        <span class="keyword">if</span> use_cuda:</span><br><span class="line">            <span class="comment">#  这允许异步 GPU 复制数据也就是说计算和数据传输可以同时进.</span></span><br><span class="line">            target_tuple = [target_tensor.cuda(non_blocking=<span class="literal">True</span>) <span class="keyword">for</span> target_tensor <span class="keyword">in</span> target_tuple]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># target tensor shape: [8,512,512,3], [8, 1, 128,128], [8,43,128,128], [8,36,128,128], [8,36,128,128]</span></span><br><span class="line">        images, mask_misses, heatmaps = target_tuple  <span class="comment"># , offsets, mask_offsets</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">            _, loss = model(target_tuple)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> args.distributed:</span><br><span class="line">            <span class="comment"># We manually reduce and average the metrics across processes. In-place reduce tensor.</span></span><br><span class="line">            reduced_loss = reduce_tensor(loss.data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            reduced_loss = loss.data</span><br><span class="line"></span><br><span class="line">        <span class="comment"># to_python_float incurs a host&lt;-&gt;device sync</span></span><br><span class="line">        losses.update(to_python_float(reduced_loss), images.size(<span class="number">0</span>))  <span class="comment"># update needs average and number</span></span><br><span class="line">        torch.cuda.synchronize()  <span class="comment"># 因为所有GPU操作是异步的，应等待当前设备上所有流中的所有核心完成，测试的时间才正确</span></span><br><span class="line">        batch_time.update((time.time() - end))</span><br><span class="line">        end = time.time()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> args.local_rank == <span class="number">0</span>:  <span class="comment"># Print them in the Process 0</span></span><br><span class="line">            print(<span class="string">'==================&gt;Test: [&#123;0&#125;/&#123;1&#125;]\t'</span></span><br><span class="line">                  <span class="string">'Time &#123;batch_time.val:.3f&#125; (&#123;batch_time.avg:.3f&#125;)\t'</span></span><br><span class="line">                  <span class="string">'Speed &#123;2:.3f&#125; (&#123;3:.3f&#125;)\t'</span></span><br><span class="line">                  <span class="string">'Loss &#123;loss.val:.4f&#125; (&#123;loss.avg:.4f&#125;)\t'</span>.format(</span><br><span class="line">                batch_idx, len(val_loader),</span><br><span class="line">                args.world_size * opt.batch_size / batch_time.val,</span><br><span class="line">                args.world_size * opt.batch_size / batch_time.avg,</span><br><span class="line">                batch_time=batch_time, loss=losses))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.local_rank == <span class="number">0</span>:  <span class="comment"># Print them in the Process 0</span></span><br><span class="line">        <span class="comment"># Write the log file each epoch.</span></span><br><span class="line">        os.makedirs(checkpoint_path, exist_ok=<span class="literal">True</span>)</span><br><span class="line">        logger = open(os.path.join(<span class="string">'./'</span> + checkpoint_path, <span class="string">'log'</span>), <span class="string">'a+'</span>)</span><br><span class="line">        logger.write(<span class="string">'\tval_loss: &#123;&#125;'</span>.format(losses.avg))  <span class="comment"># validation时不要\n换行</span></span><br><span class="line">        logger.flush()</span><br><span class="line">        logger.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">adjust_learning_rate</span><span class="params">(optimizer, epoch, step, len_epoch, use_warmup=False)</span>:</span></span><br><span class="line">    factor = epoch // <span class="number">15</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> epoch &gt;= <span class="number">78</span>:</span><br><span class="line">        factor = (epoch - <span class="number">78</span>) // <span class="number">5</span></span><br><span class="line"></span><br><span class="line">    lr = opt.learning_rate * args.world_size * (<span class="number">0.2</span> ** factor)</span><br><span class="line"></span><br><span class="line">    <span class="string">"""Warmup"""</span></span><br><span class="line">    <span class="keyword">if</span> use_warmup:</span><br><span class="line">        <span class="keyword">if</span> epoch &lt; <span class="number">3</span>:</span><br><span class="line">            <span class="comment"># print('=============&gt;  Using warm-up learning rate....')</span></span><br><span class="line">            lr = lr * float(<span class="number">1</span> + step + epoch * len_epoch) / (<span class="number">3.</span> * len_epoch)  <span class="comment"># len_epoch=len(train_loader)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># if(args.local_rank == 0):</span></span><br><span class="line">    <span class="comment">#     print("epoch = &#123;&#125;, step = &#123;&#125;, lr = &#123;&#125;".format(epoch, step, lr))</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> param_group <span class="keyword">in</span> optimizer.param_groups:</span><br><span class="line">        param_group[<span class="string">'lr'</span>] = lr</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">adjust_learning_rate_cyclic</span><span class="params">(optimizer, current_epoch, start_epoch, swa_freqent=<span class="number">5</span>, lr_max=<span class="number">4e-5</span>, lr_min=<span class="number">2e-5</span>)</span>:</span></span><br><span class="line">    epoch = current_epoch - start_epoch</span><br><span class="line"></span><br><span class="line">    lr = lr_max - (lr_max - lr_min) / (swa_freqent - <span class="number">1</span>) * (epoch - epoch // swa_freqent * swa_freqent)</span><br><span class="line">    lr = round(lr, <span class="number">8</span>)</span><br><span class="line">    <span class="keyword">for</span> param_group <span class="keyword">in</span> optimizer.param_groups:</span><br><span class="line">        param_group[<span class="string">'lr'</span>] = lr</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AverageMeter</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""Computes and stores the average and current value"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.val = <span class="number">0</span></span><br><span class="line">        self.avg = <span class="number">0</span></span><br><span class="line">        self.sum = <span class="number">0</span></span><br><span class="line">        self.count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, val, n=<span class="number">1</span>)</span>:</span></span><br><span class="line">        self.val = val</span><br><span class="line">        self.sum += val * n</span><br><span class="line">        self.count += n</span><br><span class="line">        self.avg = self.sum / self.count</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reduce_tensor</span><span class="params">(tensor)</span>:</span></span><br><span class="line">    <span class="comment"># Reduces the tensor data across all machines</span></span><br><span class="line">    <span class="comment"># If we print the tensor, we can get:</span></span><br><span class="line">    <span class="comment"># tensor(334.4330, device='cuda:1') *********************, here is cuda:  cuda:1</span></span><br><span class="line">    <span class="comment"># tensor(359.1895, device='cuda:3') *********************, here is cuda:  cuda:3</span></span><br><span class="line">    <span class="comment"># tensor(263.3543, device='cuda:2') *********************, here is cuda:  cuda:2</span></span><br><span class="line">    <span class="comment"># tensor(340.1970, device='cuda:0') *********************, here is cuda:  cuda:0</span></span><br><span class="line">    rt = tensor.clone()  <span class="comment"># The function operates in-place.</span></span><br><span class="line">    dist.all_reduce(rt, op=dist.reduce_op.SUM)</span><br><span class="line">    rt /= args.world_size</span><br><span class="line">    <span class="keyword">return</span> rt</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(start_epoch, start_epoch + <span class="number">100</span>):</span><br><span class="line">        train(epoch)</span><br><span class="line">        test(epoch)</span><br></pre></td></tr></table></figure>
<p>后面有时间的话再继续编辑，希望自己的总结可以帮助Pytorch新手们。如果我的具体代码或者具体的工作任务能够为大家提供一些帮助，那当然更加欢迎引用我的工作啦：</p>
<p>“Simple Pose: Rethinking and Improving a Bottom-up Approach for Multi-Person Pose Estimation”</p>
<p><a href="https://link.zhihu.com/?target=https%253A//arxiv.org/abs/1911.10529">https://arxiv.org/abs/1911.10529​arxiv.org</a></p>
]]></content>
      <tags>
        <tag>pytorch</tag>
      </tags>
  </entry>
</search>
